#!/usr/bin/env python
# pip install ffmpeg-python

import argparse
import ffmpeg       # type: ignore[import]
import mimetypes
import os
import re
import sys
import tempfile

SCRIPT_NAME = os.path.basename(sys.argv[0])

MULTIPLIER = 1000


def get_arguments():

    def formatter(prog):
        return argparse.HelpFormatter(prog, max_help_position=30)

    parser = argparse.ArgumentParser(prog=SCRIPT_NAME, usage="%(prog)s [option] [path]", description="Compress video to specified size.", prefix_chars='-', formatter_class=formatter, add_help=False)

    parser.add_argument('-s', '--size', metavar='SIZE', dest='out_size', help='New file size in kilobytes or megabytes.')
    parser.add_argument('-o', '--output', metavar='PATH', dest='out_path', help='Output file name or path.')
    parser.add_argument('-h', '--help', action='help', help='Show help message and exit')
    parser.add_argument('in_path', nargs='?', help=argparse.SUPPRESS)

    return parser.parse_args()


def convert_to_mp4(in_path: str, out_path: str) -> None:
    in_file = ffmpeg.input(in_path)
    ffmpeg.output(in_file, out_path, **{'c:v': 'libx264', 'c:a': 'aac'}).overwrite_output().run(quiet=True)


def compress_mp4(in_path: str, out_path: str, max_file_size: int) -> bool:

    total_bitrate_lower_bound = 11000
    min_audio_bitrate = 32000
    max_audio_bitrate = 256000
    min_video_bitrate = 100000

    probe = ffmpeg.probe(in_path)

    duration = float(probe['format']['duration'])

    audio_bitrate = float(next((s for s in probe['streams'] if s['codec_type'] == 'audio'), None)['bit_rate'])  # type: ignore

    # Target total bitrate in bits per second
    target_total_bitrate = (max_file_size * MULTIPLIER * 8) / (1.073741824 * duration)
    if target_total_bitrate < total_bitrate_lower_bound:
        print('Bitrate is extremely low! Stop compress!')
        return False

    # Best min size in kilobytes
    best_min_size = (min_audio_bitrate + min_video_bitrate) * (1.073741824 * duration) / (8 * MULTIPLIER)
    if max_file_size < best_min_size:
        print('Quality not good! Recommended minimum size:', '{:,}'.format(int(best_min_size)), 'KB.')
        return False

    if 10 * audio_bitrate > target_total_bitrate:
        audio_bitrate = target_total_bitrate / 10
        if audio_bitrate < min_audio_bitrate < target_total_bitrate:
            audio_bitrate = min_audio_bitrate
        elif audio_bitrate > max_audio_bitrate:
            audio_bitrate = max_audio_bitrate

    # Target video bitrate in bits per second
    video_bitrate = target_total_bitrate - audio_bitrate
    if video_bitrate < 1000:
        print(f'Bitrate {video_bitrate} is extremely low! Stop compress.')
        return False

    # Generate compressed version of video file
    in_file = ffmpeg.input(in_path)
    ffmpeg.output(in_file, os.devnull, **{'c:v': 'libx264', 'b:v': video_bitrate, 'pass': 1, 'f': 'mp4'}).overwrite_output().run(quiet=True)
    ffmpeg.output(in_file, out_path, **{'c:v': 'libx264', 'b:v': video_bitrate, 'pass': 2, 'c:a': 'aac', 'b:a': audio_bitrate}).overwrite_output().run(quiet=True)

    # Check new file size and compress again if it is too large
    if os.path.getsize(out_path) <= max_file_size * MULTIPLIER:
        return True
    elif os.path.getsize(out_path) < os.path.getsize(in_path):
        # Recursively continue compression if file size exceeds max_file_size
        return compress_mp4(out_path, out_path, max_file_size)

    return False


def main():

    args = get_arguments()

    in_path = os.path.abspath(args.in_path)

    if not os.path.isfile(in_path):
        print(f"file {in_path!r} does not exist")
        return 1

    in_mimetype = mimetypes.guess_type(in_path)[0]

    if in_mimetype.split('/')[0] != 'video':
        print(f"file {in_path!r} is not a video file")
        return 1

    in_size = int(os.path.getsize(in_path) / MULTIPLIER)

    if re.search(r'^[0-9]+(\.[0-9]+)?M$', args.out_size):
        out_size = int(float(args.out_size.rstrip('M')) * MULTIPLIER)
    elif re.search(r'^[0-9]+(K)?$', args.out_size):
        out_size = int(args.out_size.rstrip('K'))
    else:
        print(f"Invalid compressed size {args.out_size}K")
        return 1

    if out_size >= in_size:
        print(f"Compressed size {out_size}K must be smaller than original size {in_size}K")
        return 1

    in_filename = os.path.basename(in_path)
    in_filename_prefix = os.path.splitext(in_filename)[0]

    if args.out_path:
        out_path = os.path.abspath(args.out_path)
    else:
        out_path = os.path.join(os.getcwd(), in_filename_prefix + '_compressed.mp4')

    print(f"Compressing {in_filename!r}..")

    with tempfile.TemporaryDirectory() as temp_dir:
        os.chdir(temp_dir)
        if in_mimetype != 'video/mp4':
            converted_path = os.path.join(temp_dir, 'converted.mp4')
            convert_to_mp4(in_path, converted_path)
            result = compress_mp4(converted_path, out_path, out_size)
        else:
            result = compress_mp4(in_path, out_path, out_size)

    if result is False:
        print("Compression failed")
        return 1

    print(f"Compression Complete: {out_path!r}")

    return 0


if __name__ == '__main__':
    sys.exit(main())
