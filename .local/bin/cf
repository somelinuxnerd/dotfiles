#!/usr/bin/env python

import os
import subprocess
from pprint import pprint

HOME = os.getenv('HOME')
DOTFILES_DIR = os.path.join(HOME, 'test/dotfiles')
REPO_DIR = os.path.join(DOTFILES_DIR, 'repo')

GIT_BASE_COMMAND = ["git", "--git-dir", REPO_DIR, "--work-tree", HOME]


def git_command(arguments, run_in_repo=False, capture_output=False):

    command = ["git", "--git-dir", REPO_DIR, "--work-tree", HOME]

    if run_in_repo:
        command.extend(["-C", REPO_DIR])
    else:
        command.extend(["-C", os.getcwd()])

    command.extend(arguments)

    result = subprocess.run(
        command,
        # capture_output=capture_output,
        # text=True,
        # check=False,
        # stdout=subprocess.DEVNULL
    )

    return result.returncode


def is_bare_repo(directory):
    return subprocess.call(
        ["git", "-C", directory, "rev-parse", "--is-bare-repository"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL
    ) == 0


def bare_command(arguments):

    command = ["git", "--git-dir", REPO_DIR, "--work-tree", HOME]
    command.extend(arguments)

    result = subprocess.run(
        command,
        capture_output=False,
        check=False
    )

    return result


def get_repo_files():
    result = subprocess.run(
        ["git", "--git-dir", DOTFILES_DIR, "--work-tree", HOME, "ls-tree", "-r", "--full-tree", "--name-only", "HEAD"],
        capture_output=True,
        text=True,
        check=False
    )
    if result.returncode == 0:
        return result.stdout.split('\n')
    return None


def main():

    # result = subprocess.run(["exa -al"], shell=True, capture_output=True, text=True, check=False)
    # pprint(result.stdout)

    print()
    r = git_command(["ls-files"])
    print(r)
    print()
    r = git_command(["ls-files"], run_in_repo=True)
    print(r)
    print()


if __name__ == "__main__":
    main()
