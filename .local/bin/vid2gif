#!/usr/bin/env python3
# Converts a video file to a gif
# Requires cv2 'pip install opencv-python'

import argparse
import cv2
import os
import subprocess
import sys
from shutil import which

SCRIPT_NAME = os.path.basename(sys.argv[0])


def get_arguments():

    def formatter(prog: str):
        return argparse.HelpFormatter(prog, max_help_position=30)

    parser = argparse.ArgumentParser(prog=SCRIPT_NAME, description="Convert video to gif", usage='%(prog)s [OPTIONS] [PATH]', prefix_chars='-', formatter_class=formatter, add_help=False, allow_abbrev=True)

    parser.add_argument('-r', '--resolution', metavar='VALUE', type=int, help='Resolution of gif (default: resolution of video)')
    parser.add_argument('-w', '--width', metavar='VALUE', type=int, default=None, help='Resolution of gif (default: resolution of video)')
    parser.add_argument('-f', '--fps', metavar='FRAMES', type=int, help='Frames per second (default: same as video source)')
    parser.add_argument('-h', '--help', action='help', default=False, help='Show help message and exit.')
    parser.add_argument('path', type=str, nargs='?', help=argparse.SUPPRESS)

    return parser.parse_args()


def generate_gif(input_path, output_width, output_height, output_fps):

    output_prefix = '.'.join(os.path.splitext(os.path.basename(input_path))[:-1])

    palette_path = os.path.join('/tmp', f'{output_prefix}.png')

    output_path = f'{output_prefix}_{output_width}x{output_height}_{output_fps}fps.gif'
    output_filters = f"fps={output_fps},scale={output_width}:-1:flags=lanczos"

    print(f"Creating {output_path}..")

    # Create palette
    command_palette = ['ffmpeg', '-hide_banner', '-loglevel', 'error', '-i', input_path, '-vf', f'{output_filters},palettegen=stats_mode=diff', '-y', palette_path]
    subprocess.Popen(command_palette).wait()

    # Create gif using palette
    command_gif = ['ffmpeg', '-hide_banner', '-loglevel', 'error', '-i', input_path, '-i', palette_path, '-lavfi', f'{output_filters},paletteuse=dither=bayer:bayer_scale=5:diff_mode=rectangle', '-y', output_path]
    subprocess.Popen(command_gif).wait()

    # Remove palette file
    os.remove(palette_path)


def main():

    if not which("ffmpeg"):
        sys.exit(f"{SCRIPT_NAME}: ffmpeg is not installed")

    args = get_arguments()

    video_path = args.path if args.path else None

    if video_path is None:
        sys.exit(f"{SCRIPT_NAME}: path not specified")
    elif not os.path.exists(video_path):
        sys.exit(f"{SCRIPT_NAME}: file {video_path!r} does not exist")

    video_format = os.path.splitext(video_path)[-1].lstrip('.')

    if video_format == '':
        sys.exit(f"{SCRIPT_NAME}: invalid video {video_path!r}")
    elif video_format not in ('mp4', 'mkv', 'avi', 'mov', 'wmv', 'flv', 'webm'):
        sys.exit(f"{SCRIPT_NAME}: video format {video_format!r} is not valid")

    capture = cv2.VideoCapture(video_path)
    video_width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))
    video_height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))
    video_fps = int(capture.get(cv2.CAP_PROP_FPS))

    gif_width = args.width if args.width else video_width
    gif_height = int(video_height * (gif_width / video_width))
    gif_fps = args.fps if args.fps else video_fps

    if gif_width > video_width:
        sys.exit(f"{SCRIPT_NAME}: width {gif_width!r} is greater than width of video {video_width!r}")
    elif gif_fps > video_fps:
        sys.exit(f"{SCRIPT_NAME}: fps {gif_fps!r} is greater than fps of video {video_fps!r}")

    generate_gif(video_path, gif_width, gif_height, gif_fps)


if __name__ == "__main__":
    main()
